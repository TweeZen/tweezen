pipeline {
    agent any
    environment {
        GIT_EMAIL = 'no-reply@jenkins.com'
        GIT_USER = 'JenkinsVM'
    }
    tools {
        maven 'Maven 3.6.2'
        jdk 'jdk8'
    }
    stages {
        stage ('Checking Tools') {
            steps {
                sh '''
                    echo 'user in use:' $USER
                    java -version
                    mvn --version
                    docker version
                '''
            }
        }
        stage('Generate Build ID') {
            steps {
                dir("retwisj"){
                    script {
                        def pom = readMavenPom file: 'pom.xml'
                        env.POM_VERSION = pom.version
                        env.BUILD_ID = "${env.POM_VERSION}-${env.BUILD_NUMBER}"
                        echo "${env.BUILD_ID}"
                    }
                }
            }
        }
        stage('Preparation') {
            steps {
                sshagent (credentials: ['git-ssh']) {
                    sh 'git config core.sshCommand "ssh -v -o StrictHostKeyChecking=no"'
                    sh "git config --global user.email ${env.GIT_EMAIL}"
                    sh "git config --global user.name ${env.GIT_USER}"
                    sh "git clone git@github.com:TweeZen/tweezen-deployment.git"
                }
            }
        }
        stage('Build') {
            steps {
                dir("retwisj"){
                    sh 'mvn -Dmaven.test.failure.ignore clean package'
                }
            }
        }
        stage('Google Authentification') {
            steps {
                sh '''
                    gcloud auth activate-service-account 592775981948-compute@developer.gserviceaccount.com --key-file=/opt/bitnami/k8s-credentials.json
                    gcloud auth configure-docker --quiet
                    gcloud auth list
                '''
            }
        }
        stage('Docker') {
            steps {
                dir("retwisj"){
                    sh '''
                        docker build -t tweezen:$BUILD_ID .
                        docker tag tweezen:$BUILD_ID eu.gcr.io/robust-zenith-161810/tweezen:$BUILD_ID
                        docker push eu.gcr.io/robust-zenith-161810/tweezen:$BUILD_ID
                    '''
                }
            }
        }
        stage('Deployment Modification') {
            steps {
                dir("tweezen-deployment"){
                    sshagent (credentials: ['git-ssh']) {
                        sh'''
                            cp ../template/deployment_app.yaml ./deployment_app.yaml
                            sed -i "s/#{BUILD_ID}#/${BUILD_ID}/" deployment_app.yaml
                            git add deployment_app.yaml
                            git commit -m 'Deployment Version ${env.BUILD_ID}'
                            git push origin HEAD:master
                        '''
                    }
                }
            }
        }
        // stage('Results') {
        //     junit '**/target/surefire-reports/TEST-*.xml'
        //     archiveArtifacts 'target/*.jar'
        // }
    }
    post {
        always {
            slackSend color: 'good', message: "üïì [<${env.JOB_URL}|${env.JOB_NAME}>-<${env.BUILD_URL}|#${env.BUILD_NUMBER}>] Build Started with id ${env.BUILD_ID}"
        }
        success {
            slackSend color: 'good', message: "üêã [<${env.JOB_URL}|${env.JOB_NAME}>-<${env.BUILD_URL}|#${env.BUILD_NUMBER}>] Docker image successfully built and pushed on GCR!"
        }
        failure {
            slackSend color: '#ff0000', message: "‚ùå [<${env.JOB_URL}|${env.JOB_NAME}>-<${env.BUILD_URL}|#${env.BUILD_NUMBER}>] Build Failed! (<${env.BUILD_URL}/console|view logs>)"
        }
    }
}